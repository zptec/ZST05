FUNCTION ZTMPTB_TABLE_RELATION.
*"----------------------------------------------------------------------
*"*"本地接口：
*"  TABLES
*"      IT_MAIN_RECORD_OLD OPTIONAL
*"      ET_MAIN_RECORD_NEW OPTIONAL
*"----------------------------------------------------------------------

"&---------------------------------------
"& ZST05_I06:/ TABLE RELATION ANALYZER
"& Boris Town
"&---------------------------------------

"&---------------------------------------
"& 01 Global Definition
"&---------------------------------------
  DATA REF_SQL_EXECUTOR TYPE REF TO CL_HDB_SQL_EXECUTOR.
  DATA REF_SYSTEM TYPE REF TO CL_DB6_SYS.
  DATA LT_ZTMPTB_MAIN_RECORD TYPE TABLE OF ZTMPTB_MAIN_RECORD.
  DATA LS_ZTMPTB_MAIN_RECORD TYPE ZTMPTB_MAIN_RECORD.
  DATA LT_ZTMPTB_MAIN_RECORD_OLD TYPE TABLE OF ST05_MAIN_RECORD.
  DATA: LS_ZTMPTB_MAIN_RECORD_OLD TYPE ST05_MAIN_RECORD,
        LR_RESULT_DESCR  TYPE REF TO CL_ABAP_STRUCTDESCR,
        LR_RESULT        TYPE REF TO DATA.
  DATA: L_TABIX TYPE I.
  DATA: L_SUB_TABIX TYPE I.
  CLEAR: REF_SQL_EXECUTOR, REF_SYSTEM, LT_ZTMPTB_MAIN_RECORD, LS_ZTMPTB_MAIN_RECORD,
  LT_ZTMPTB_MAIN_RECORD_OLD, LS_ZTMPTB_MAIN_RECORD_OLD, LR_RESULT_DESCR, LR_RESULT.
"&---------------------------------------
"& 02 Init SQL_EXECUTOR
"&---------------------------------------
  CREATE OBJECT REF_SQL_EXECUTOR.
  REF_SYSTEM = CL_DB6_SYS=>GET_SYS_REF( SYSTEM_ID     = SY-SYSID
                                        IGNORE_ERRORS = ''
                                        SYNCHRONIZE   = '' ).

  LT_ZTMPTB_MAIN_RECORD_OLD[] = IT_MAIN_RECORD_OLD[].

"&---------------------------------------
"& 03 Get statment and variable list
"&---------------------------------------
  TYPES: BEGIN OF LY_STATEMENT,
           SOURCE_INDEX TYPE I,
           OBJECT TYPE ST05_OBJECT,
           STATEMENT_WITH_NAMES TYPE ST05_STATEMENT,
           SELECT_SQL TYPE STRING,
           VARIABLES TYPE ALPF_STRING_TAB,
           KEYS TYPE ALPF_STRING_TAB,
        END OF LY_STATEMENT.

  DATA: LT_STATEMENT TYPE TABLE OF LY_STATEMENT.
  DATA: LS_STATEMENT TYPE LY_STATEMENT.
  DATA: LS_STATEMENT_RELATION TYPE LY_STATEMENT.

"&---------------------------------------
"& 03.1 Get distinct objects
"&---------------------------------------
  DATA LT_OBJECT_LIST TYPE TABLE OF ST05_OBJECT.
  DATA LS_OBJECT_LIST TYPE ST05_OBJECT.
  DATA L_OBJECT_COUNT TYPE I.

  CLEAR: LT_OBJECT_LIST, LS_OBJECT_LIST, L_OBJECT_COUNT.

  LOOP AT LT_ZTMPTB_MAIN_RECORD_OLD INTO LS_ZTMPTB_MAIN_RECORD_OLD.
    LS_STATEMENT-SOURCE_INDEX = SY-TABIX.
    LS_STATEMENT-OBJECT = LS_ZTMPTB_MAIN_RECORD_OLD-OBJECT.
    LS_STATEMENT-STATEMENT_WITH_NAMES = LS_ZTMPTB_MAIN_RECORD_OLD-STATEMENT_WITH_NAMES.

    READ TABLE LT_OBJECT_LIST INTO LS_OBJECT_LIST WITH KEY = LS_STATEMENT-OBJECT BINARY SEARCH.
    IF SY-SUBRC NE 0.
      ADD 1 TO L_OBJECT_COUNT.
      APPEND LS_STATEMENT-OBJECT TO LT_OBJECT_LIST.
      SORT LT_OBJECT_LIST.
    ENDIF.

    IF LS_ZTMPTB_MAIN_RECORD_OLD-STATEMENT_WITH_VALUES CP 'SELECT*'.
      CALL FUNCTION 'ZTMPTB_RESTORE_SQL'
        EXPORTING
          IV_STATEMENT            = LS_ZTMPTB_MAIN_RECORD_OLD-STATEMENT_WITH_NAMES
          IV_VARIABLES            = LS_ZTMPTB_MAIN_RECORD_OLD-VARIABLES
        IMPORTING
          EV_SQL                  = LS_STATEMENT-SELECT_SQL
          ET_VARIABLE_VALUE       = LS_STATEMENT-VARIABLES
          ET_KEYS                 = LS_STATEMENT-KEYS
        EXCEPTIONS
          REMARKS_NOT_MATCH       = 1
          OTHERS                  = 2
                .
      IF SY-SUBRC EQ 0.
        APPEND LS_STATEMENT TO LT_STATEMENT.
        CLEAR LS_STATEMENT.
      ENDIF.
    ENDIF.
  ENDLOOP.
  SORT LT_STATEMENT BY SOURCE_INDEX.

"&---------------------------------------
"& 03.2 CREATE OBJECT RELATION MAPPING TABLE
"&---------------------------------------
  TYPES: BEGIN OF LST_MAP_ITEM ,
      FIELDNAME_L TYPE FIELDNAME, "LEFT TABLE MAP FIELD NAME
      FIELDNAME_R TYPE FIELDNAME, "RIGHT TABLE MAP FIELD NAME
      FIELDVALUE TYPE CHAR40, "MAP FIELD VALUE
    END OF LST_MAP_ITEM.
  DATA LT_MAP_ITEM TYPE TABLE OF LST_MAP_ITEM."MAP ITEMS
  DATA LS_MAP_ITEM TYPE LST_MAP_ITEM. "MAP ITEM
  TYPES: BEGIN OF LTT_RELATION_COL ,
          MAPS LIKE LT_MAP_ITEM, " MAP TABLE (2ed dimension)
*          MAP_STR TYPE ZTMPTB_MAIN_RECORD-ZZREMARK02, "MAPING STRING
        END OF LTT_RELATION_COL.
  DATA LS_RELATION_COL TYPE LTT_RELATION_COL.
  DATA LT_RELATION_COL TYPE TABLE OF LTT_RELATION_COL.
  DATA: BEGIN OF LT_RELATION_ROW OCCURS 1,
          COL LIKE LT_RELATION_COL,
        END OF LT_RELATION_ROW.
  DATA LS_RELATION_ROW LIKE LINE OF LT_RELATION_ROW.
  DATA L_RELATION_CELL TYPE ZTMPTB_MAIN_RECORD-ZZREMARK01.
  DATA DO_INDEX_RIGHT TYPE I.
  DATA DO_INDEX_LEFT TYPE I.
  CLEAR: DO_INDEX_RIGHT, L_RELATION_CELL.

  "TABLE RELATION STRING LIST
  DATA LT_MAP_STR_LIST TYPE TABLE OF ZTMPTB_MAIN_RECORD-ZZREMARK02.
  DATA L_MAP_STR TYPE ZTMPTB_MAIN_RECORD-ZZREMARK02.
  CLEAR: LT_MAP_STR_LIST[], L_MAP_STR.

  "RIGHT TABLE（1st dimension）
  DO L_OBJECT_COUNT TIMES.
    ADD 1 TO DO_INDEX_RIGHT.
    CLEAR DO_INDEX_LEFT.
    CLEAR LS_RELATION_ROW.
    "LEFT TABLE（2ed dimension）
    DO L_OBJECT_COUNT TIMES.
      ADD 1 TO DO_INDEX_LEFT.
      CLEAR LS_RELATION_COL.
*      CLEAR LT_MAP_ITEM.
      APPEND LS_RELATION_COL TO LS_RELATION_ROW-COL.
    ENDDO.
    APPEND L_MAP_STR TO LT_MAP_STR_LIST.
    APPEND LS_RELATION_ROW TO LT_RELATION_ROW.
    CLEAR L_MAP_STR.
    CLEAR LS_RELATION_ROW.
  ENDDO.

  LOOP AT LT_ZTMPTB_MAIN_RECORD_OLD INTO LS_ZTMPTB_MAIN_RECORD_OLD.
    L_TABIX = SY-TABIX.
    MOVE-CORRESPONDING LS_ZTMPTB_MAIN_RECORD_OLD TO LS_ZTMPTB_MAIN_RECORD.
    IF LS_ZTMPTB_MAIN_RECORD-STATEMENT_WITH_VALUES CP 'SELECT*'
      AND LS_ZTMPTB_MAIN_RECORD-NUMBER_OF_ROWS > 0.
      "CL_HDB_ACTION_SQL_EDITOR IF_DB6_ACTION_CONTROLLER~REFRESH_VIEW
      CLEAR LR_RESULT_DESCR.
      CLEAR LR_RESULT.
"&---------------------------------------
"& 04 Execute SQL Query
"&---------------------------------------
      READ TABLE LT_STATEMENT INTO LS_STATEMENT WITH KEY SOURCE_INDEX = L_TABIX BINARY SEARCH .
      IF SY-SUBRC EQ 0.
        L_SUB_TABIX = SY-SUBRC + 1.
        "EXECUTE QUERY
        TRY.
        REF_SQL_EXECUTOR->EXEC_QUERY_DYN( EXPORTING IM_STATEMENT    = LS_STATEMENT-SELECT_SQL
                                                IM_CURSOR_SIZE  = '1'
                                                IM_SYSTEM       = REF_SYSTEM
                                                IM_CHECK        = ABAP_TRUE
                                                IM_LOGGING      = ABAP_TRUE
                                      IMPORTING EX_STRUCTDESCR  = LR_RESULT_DESCR
                                                EX_RESULT_REF   = LR_RESULT ).
        CATCH CX_ROOT INTO DATA(OREF).
          APPEND LS_ZTMPTB_MAIN_RECORD TO LT_ZTMPTB_MAIN_RECORD.
          CLEAR LS_ZTMPTB_MAIN_RECORD.
          "IF ERROR OCCURS IN SQL STATEMTNT, GOTO NEXT LINE
          CONTINUE.
        ENDTRY.
"&---------------------------------------
"& 05 Create receipt structure
"&---------------------------------------
        FIELD-SYMBOLS <LT_OUTTAB> TYPE STANDARD TABLE.
        FIELD-SYMBOLS <LS_OUTTAB> TYPE ANY.
        DATA LR_RESULT_LINE TYPE REF TO DATA.
        DATA LT_COMP_TAB TYPE CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
        DATA LS_COMP_FLD TYPE CL_ABAP_STRUCTDESCR=>COMPONENT.

        UNASSIGN: <LT_OUTTAB>, <LS_OUTTAB>.

        CREATE DATA LR_RESULT_LINE TYPE HANDLE LR_RESULT_DESCR.
        ASSIGN LR_RESULT_LINE->* TO <LS_OUTTAB>.

        CLEAR LT_COMP_TAB.
        LT_COMP_TAB = LR_RESULT_DESCR->GET_COMPONENTS( ).
"&---------------------------------------
"& 06 Assign result table
"&---------------------------------------
        FIELD-SYMBOLS <L_FLD> TYPE ANY.
        DATA L_STR_FLD TYPE CHAR255.

        ASSIGN LR_RESULT->* TO <lt_outtab>.
"&---------------------------------------
"& 07 Find field relation
"&---------------------------------------
        DATA L_VARIABLE_CURRENT TYPE STRING.
        DATA L_STR_SOURCEINDEX TYPE CHAR5.
        DATA L_STRLEN_FLD TYPE I.
        DATA VAR_INDEX TYPE I.
        DATA L_KEY TYPE ALPFSTRING.
        "Get index of Left Table
        READ TABLE LT_OBJECT_LIST INTO LS_OBJECT_LIST WITH KEY = LS_STATEMENT-OBJECT BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          DO_INDEX_RIGHT = SY-TABIX.
        ENDIF.
*        READ TABLE LT_RELATION_ROW INTO LS_RELATION_ROW.
        READ TABLE <LT_OUTTAB> INTO <LS_OUTTAB> INDEX 1.
        IF SY-SUBRC EQ 0.
          LOOP AT LT_COMP_TAB INTO LS_COMP_FLD
            WHERE NAME NE 'CLIENT'
            AND NAME NE 'MANDT'.
            ASSIGN COMPONENT LS_COMP_FLD-NAME OF STRUCTURE <LS_OUTTAB> TO <L_FLD>.
            WRITE <L_FLD> TO L_STR_FLD.
            CONDENSE L_STR_FLD.
            L_STRLEN_FLD = STRLEN( L_STR_FLD ).
            IF L_STRLEN_FLD > 1 AND L_STR_FLD CN '0 '.
              "IF IS NOT CURRENT SELECT PARAMETER,SEARCH FOR OTHER SELECT PARAMETER
*              READ TABLE LS_STATEMENT-VARIABLES INTO L_VARIABLE_CURRENT WITH KEY = L_STR_FLD.
*              IF SY-SUBRC NE 0.
                "SEARCH FOR NEXT SELECT PARAMETER
                LOOP AT LT_STATEMENT INTO LS_STATEMENT_RELATION FROM L_SUB_TABIX WHERE OBJECT NE LS_STATEMENT-OBJECT.
                  "Get index of Right Table
                  READ TABLE LT_OBJECT_LIST INTO LS_OBJECT_LIST WITH KEY = LS_STATEMENT_RELATION-OBJECT BINARY SEARCH.
                  IF SY-SUBRC EQ 0.
                    DO_INDEX_LEFT = SY-TABIX.
                  ENDIF.
                  "CHECK IF TABLE RELATION EXIST
                  READ TABLE LT_RELATION_ROW INTO LS_RELATION_ROW INDEX DO_INDEX_RIGHT.
                  IF SY-SUBRC EQ 0.
                    READ TABLE LS_RELATION_ROW-COL INTO LS_RELATION_COL INDEX DO_INDEX_LEFT.
                    IF SY-SUBRC EQ 0.
                      READ TABLE LS_RELATION_COL-MAPS INTO LS_MAP_ITEM WITH KEY FIELDNAME_R = LS_COMP_FLD-NAME BINARY SEARCH.
                      IF SY-SUBRC EQ 0.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                  "FIND EQUAL VARIABLE
                  READ TABLE LS_STATEMENT_RELATION-VARIABLES INTO L_VARIABLE_CURRENT WITH KEY = L_STR_FLD.
                  IF SY-SUBRC EQ 0.
                    VAR_INDEX = SY-TABIX.
                    "GET NAME OF RIGHT TABLE KEY
                    READ TABLE LS_STATEMENT_RELATION-KEYS INTO L_KEY INDEX VAR_INDEX.
                    IF SY-SUBRC EQ 0.
                      "FIND INDEX IN SOURCE RESULT TABLE
                      L_STR_SOURCEINDEX = LS_STATEMENT_RELATION-SOURCE_INDEX.
                      "Add origin table relation
                      READ TABLE LT_RELATION_ROW INTO LS_RELATION_ROW INDEX DO_INDEX_RIGHT.
                      IF SY-SUBRC EQ 0.
                        READ TABLE LS_RELATION_ROW-COL INTO LS_RELATION_COL INDEX DO_INDEX_LEFT.
                        IF SY-SUBRC EQ 0.
                          CLEAR LS_MAP_ITEM.
                          LS_MAP_ITEM-FIELDNAME_L = L_KEY. "LEFT MAPPING FIELD
                          LS_MAP_ITEM-FIELDNAME_R = LS_COMP_FLD-NAME. "RIGHT MAPPING FIELD
                          LS_MAP_ITEM-FIELDVALUE = L_STR_FLD. "MAPPING FIELD VALUE
                          APPEND LS_MAP_ITEM TO LS_RELATION_COL-MAPS.
                          CLEAR LS_MAP_ITEM.
                          SORT LS_RELATION_COL-MAPS BY FIELDNAME_R.
*                          READ TABLE LT_MAP_STR_LIST INTO L_MAP_STR INDEX DO_INDEX_LEFT.
*                          IF SY-SUBRC EQ 0.
*                            IF L_MAP_STR IS INITIAL.
*                              CONCATENATE LS_STATEMENT_RELATION-OBJECT '-' L_KEY '=' LS_STATEMENT-OBJECT '-' LS_COMP_FLD-NAME ' = ' L_STR_FLD
*                              INTO L_MAP_STR.
*                            ELSE.
*                              CONCATENATE L_MAP_STR ';' LS_STATEMENT_RELATION-OBJECT '-' L_KEY '=' LS_STATEMENT-OBJECT '-' LS_COMP_FLD-NAME ' = ' L_STR_FLD
*                              INTO L_MAP_STR.
*                            ENDIF.
*                            MODIFY LT_MAP_STR_LIST FROM L_MAP_STR INDEX DO_INDEX_LEFT.
*                          ENDIF.
                          MODIFY LS_RELATION_ROW-COL FROM LS_RELATION_COL INDEX DO_INDEX_LEFT.
                        ENDIF.
                        MODIFY LT_RELATION_ROW FROM LS_RELATION_ROW INDEX DO_INDEX_RIGHT.
                      ENDIF.
*                      EXIT.
                    ENDIF.
                  ENDIF.
                ENDLOOP.
*              ENDIF.
            ENDIF.
          ENDLOOP.
*          CONDENSE LS_ZTMPTB_MAIN_RECORD-ZZREMARK02.
"&---------------------------------------
"& 08 Display table line
"&---------------------------------------
          IF LS_ZTMPTB_MAIN_RECORD-ZZREMARK01 IS INITIAL.
            LOOP AT LT_COMP_TAB INTO LS_COMP_FLD.
              ASSIGN COMPONENT LS_COMP_FLD-NAME OF STRUCTURE <LS_OUTTAB> TO <L_FLD>.
              WRITE <L_FLD> TO L_STR_FLD.
              CONDENSE L_STR_FLD.
              IF LS_ZTMPTB_MAIN_RECORD-ZZREMARK01 IS INITIAL.
                LS_ZTMPTB_MAIN_RECORD-ZZREMARK01 =  L_STR_FLD.
              ELSE.
                CONCATENATE LS_ZTMPTB_MAIN_RECORD-ZZREMARK01 '|' L_STR_FLD
                INTO LS_ZTMPTB_MAIN_RECORD-ZZREMARK01 SEPARATED BY SPACE .
              ENDIF.
            ENDLOOP.
            CONDENSE LS_ZTMPTB_MAIN_RECORD-ZZREMARK01.
*            WRITE <LS_OUTTAB> TO LS_ZTMPTB_MAIN_RECORD-ZZREMARK02 .
*            LS_ZTMPTB_MAIN_RECORD-ZZREMARK02 = 'X'.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    APPEND LS_ZTMPTB_MAIN_RECORD TO LT_ZTMPTB_MAIN_RECORD.
    CLEAR LS_ZTMPTB_MAIN_RECORD.
  ENDLOOP.

*  DATA L_TABLE_LEFT TYPE ST05_OBJECT.
  DATA L_TABLE_RIGHT TYPE ST05_OBJECT.
  DATA L_TABIX_ELEMENT TYPE I.

  TYPES: BEGIN OF LY_ELEMENT_LINK,
          TABLENAME TYPE ST05_OBJECT,
          FIELDNAME LIKE LS_MAP_ITEM-FIELDNAME_R,
         END OF LY_ELEMENT_LINK.

  DATA LTT_ELEMENT_LINK TYPE TABLE OF LY_ELEMENT_LINK.

  DATA LS_LINK TYPE LY_ELEMENT_LINK.

  TYPES: BEGIN OF LY_ELEMENT,
            ELEMENT_NAME LIKE LS_MAP_ITEM-FIELDVALUE,
            LINKS LIKE LTT_ELEMENT_LINK,
         END OF LY_ELEMENT.

  TYPES: LTT_ELEMENT TYPE TABLE OF LY_ELEMENT.

  DATA LS_ELEMENT TYPE LY_ELEMENT.

  DATA: BEGIN OF LT_ELEMENT_LIST OCCURS 1,
          ELEMENTS TYPE LTT_ELEMENT,
        END OF LT_ELEMENT_LIST.

  DATA:LS_ELEMENT_LIST LIKE LT_ELEMENT_LIST.

  "Initial Link Elements
  DO L_OBJECT_COUNT TIMES.
    CLEAR LS_ELEMENT_LIST.
    APPEND LS_ELEMENT_LIST TO LT_ELEMENT_LIST.
  ENDDO.

  "Process & Combine Table Relation
  LOOP AT LT_RELATION_ROW INTO LS_RELATION_ROW."RIGHT TABLE
    DO_INDEX_RIGHT = SY-TABIX.
    "Get Right Table Name
    READ TABLE LT_OBJECT_LIST INTO LS_OBJECT_LIST INDEX DO_INDEX_RIGHT.
    IF SY-SUBRC EQ 0.
      L_TABLE_RIGHT = LS_OBJECT_LIST.
    ENDIF.
    LOOP AT LS_RELATION_ROW-COL INTO LS_RELATION_COL."LEFT TABLE
      DO_INDEX_LEFT = SY-TABIX.
      "LINK ELEMENT
      READ TABLE LT_ELEMENT_LIST INTO LS_ELEMENT_LIST INDEX DO_INDEX_LEFT.
      IF SY-SUBRC EQ 0.
        LOOP AT LS_RELATION_COL-MAPS INTO LS_MAP_ITEM.
          READ TABLE LS_ELEMENT_LIST-ELEMENTS INTO LS_ELEMENT WITH KEY ELEMENT_NAME = LS_MAP_ITEM-FIELDVALUE BINARY SEARCH.
          IF SY-SUBRC EQ 0.
            L_TABIX_ELEMENT = SY-TABIX.
            "Add Left link
            IF LS_ELEMENT-LINKS[] IS INITIAL .
              READ TABLE LT_OBJECT_LIST INTO LS_OBJECT_LIST INDEX DO_INDEX_LEFT.
              IF SY-SUBRC EQ 0.
                LS_LINK-TABLENAME = LS_OBJECT_LIST.
              ENDIF.
              LS_LINK-FIELDNAME = LS_MAP_ITEM-FIELDNAME_L.
              APPEND LS_LINK TO LS_ELEMENT-LINKS.
              CLEAR LS_LINK.
            ENDIF.
            "Add Right link
            LS_LINK-TABLENAME = L_TABLE_RIGHT.
            LS_LINK-FIELDNAME = LS_MAP_ITEM-FIELDNAME_R.
            APPEND LS_LINK TO LS_ELEMENT-LINKS.
            CLEAR LS_LINK.
            SORT LS_ELEMENT-LINKS BY TABLENAME FIELDNAME.
            MODIFY LS_ELEMENT_LIST-ELEMENTS FROM LS_ELEMENT INDEX L_TABIX_ELEMENT.
          ELSE.
            "Add Left link
            IF LS_ELEMENT-LINKS[] IS INITIAL .
              READ TABLE LT_OBJECT_LIST INTO LS_OBJECT_LIST INDEX DO_INDEX_LEFT.
              IF SY-SUBRC EQ 0.
                LS_LINK-TABLENAME = LS_OBJECT_LIST.
              ENDIF.
              LS_LINK-FIELDNAME = LS_MAP_ITEM-FIELDNAME_L.
              APPEND LS_LINK TO LS_ELEMENT-LINKS.
              CLEAR LS_LINK.
            ENDIF.
            "Add Right link
            LS_LINK-TABLENAME = L_TABLE_RIGHT.
            LS_LINK-FIELDNAME = LS_MAP_ITEM-FIELDNAME_R.
            APPEND LS_LINK TO LS_ELEMENT-LINKS.
            CLEAR LS_LINK.
            SORT LS_ELEMENT-LINKS BY TABLENAME FIELDNAME.

            LS_ELEMENT-ELEMENT_NAME = LS_MAP_ITEM-FIELDVALUE.

            APPEND LS_ELEMENT TO LS_ELEMENT_LIST-ELEMENTS.
            SORT LS_ELEMENT_LIST-ELEMENTS BY ELEMENT_NAME.
          ENDIF.
        ENDLOOP.
        MODIFY LT_ELEMENT_LIST FROM LS_ELEMENT_LIST INDEX DO_INDEX_LEFT.
      ENDIF.
    ENDLOOP.
  ENDLOOP.

  "Concatenate Table Relations
  "LINK ELEMENTS
  LOOP AT LT_ELEMENT_LIST INTO LS_ELEMENT_LIST .
    DO_INDEX_LEFT = SY-TABIX.
    "RELATION STRING LIST
    READ TABLE LT_MAP_STR_LIST INTO L_MAP_STR INDEX DO_INDEX_LEFT.
    IF SY-SUBRC EQ 0.
      "ELEMENT LIST
      LOOP AT LS_ELEMENT_LIST-ELEMENTS INTO LS_ELEMENT.
        "ADD SEPERATOR
        IF L_MAP_STR IS NOT INITIAL.
          CONCATENATE L_MAP_STR ';' INTO L_MAP_STR.
        ENDIF.
        "LINK LIST
        LOOP AT LS_ELEMENT-LINKS INTO LS_LINK.
          CONCATENATE L_MAP_STR LS_LINK-TABLENAME '-' LS_LINK-FIELDNAME '=' INTO L_MAP_STR.
        ENDLOOP.
        "ADD LINK ELEMENT NAME
        CONCATENATE L_MAP_STR LS_ELEMENT-ELEMENT_NAME INTO L_MAP_STR.
      ENDLOOP.
      MODIFY LT_MAP_STR_LIST FROM L_MAP_STR INDEX DO_INDEX_LEFT.
    ENDIF.
  ENDLOOP.

  LOOP AT LS_RELATION_COL-MAPS INTO LS_MAP_ITEM.
    READ TABLE LS_ELEMENT_LIST-ELEMENTS INTO LS_ELEMENT WITH KEY ELEMENT_NAME = LS_MAP_ITEM-FIELDVALUE BINARY SEARCH.
    IF SY-SUBRC EQ 0.
    ENDIF.
  ENDLOOP.

  "Update Table Relation Text
  LOOP AT LT_ZTMPTB_MAIN_RECORD INTO LS_ZTMPTB_MAIN_RECORD
    WHERE STATEMENT_WITH_VALUES CP 'SELECT*'.
*    AND ZZREMARK02 EQ SPACE.
    "Get index of Right Table
    READ TABLE LT_OBJECT_LIST INTO LS_OBJECT_LIST WITH KEY = LS_ZTMPTB_MAIN_RECORD-OBJECT BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      DO_INDEX_LEFT = SY-TABIX. "左表
      READ TABLE LT_MAP_STR_LIST INTO L_MAP_STR INDEX DO_INDEX_LEFT.
      IF SY-SUBRC EQ 0.
        MOVE L_MAP_STR TO LS_ZTMPTB_MAIN_RECORD-ZZREMARK02.
        MODIFY LT_ZTMPTB_MAIN_RECORD FROM LS_ZTMPTB_MAIN_RECORD.
      ENDIF.
   ENDIF.
  ENDLOOP.

FREE LT_RELATION_ROW.
ET_MAIN_RECORD_NEW[] = LT_ZTMPTB_MAIN_RECORD[].

ENDFUNCTION.
